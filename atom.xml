<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辰、枫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-30T00:55:18.531Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JJacky Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>细谈Java之数组篇</title>
    <link href="http://yoursite.com/2020/05/29/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/"/>
    <id>http://yoursite.com/2020/05/29/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/</id>
    <published>2020-05-29T07:17:53.000Z</published>
    <updated>2020-05-30T00:55:18.531Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></li></ol><p>数组是编程语言中一种常见的数据结构，不同的语言对其的实现和处理也是不同的。下面将介绍Java中的数组。</p><a id="more"></a><ol start="2"><li><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2></li><li><h3 id="数组是一种类型"><a href="#数组是一种类型" class="headerlink" title="数组是一种类型"></a>数组是一种类型</h3><ol><li>在Java中，要求所有的数组元素有相同的数据类型，因此，在一个数组中，数组元素的类型是唯一的。</li><li>一旦其被初始化完成后，其所占内存空间也被固定下来了，即其长度不可改变。</li><li>数组是引用类型</li></ol></li><li><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><ol><li><p>两种语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName;（推荐）</span><br><span class="line">type arranName[];</span><br></pre></td></tr></table></figure></li><li><p>定义数组时不能指定数组的长度</p></li></ol></li><li><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><ol><li><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><ol><li><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">arrayName = <span class="keyword">new</span> type[]&#123;element1,element2,element3.....&#125;;</span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">type[] arrayName = <span class="keyword">new</span> type[]&#123;element1,element2,element3.....&#125;;</span><br></pre></td></tr></table></figure></li><li><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个 int 数组类型的变量，变量名为 intArr</span></span><br><span class="line">        <span class="keyword">int</span>[] intArr;</span><br><span class="line">        <span class="comment">// 使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度</span></span><br><span class="line">        intArr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="comment">// 定义一个 Object 数组类型的变量，变量名为 objArr</span></span><br><span class="line">        Object[] objArr;</span><br><span class="line">        <span class="comment">// 使用静态初始化，初始化数组时数组元素的类型是</span></span><br><span class="line">        <span class="comment">//定义数组时所指定的数组元素类型的子类</span></span><br><span class="line">        objArr = <span class="keyword">new</span> String[]&#123;<span class="string">"西游记"</span>, <span class="string">"吴承恩"</span>&#125;;</span><br><span class="line">        Object[] objArr2;</span><br><span class="line">        <span class="comment">//使用静态初始化</span></span><br><span class="line">        objArr2 = <span class="keyword">new</span> Object[]&#123;<span class="string">"斗破苍穹"</span>, <span class="string">"天蚕土豆"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><ol><li><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayName = <span class="keyword">new</span> type[length];</span><br></pre></td></tr></table></figure></li><li><h5 id="初始值规则"><a href="#初始值规则" class="headerlink" title="初始值规则"></a>初始值规则</h5><table><thead><tr><th>数组元素类型</th><th>数组元素默认初始值</th></tr></thead><tbody><tr><td>整数类型（byte、short、int、long）</td><td>0</td></tr><tr><td>浮点类型（float、double）</td><td>0.0</td></tr><tr><td>字符类型（char）</td><td>\u0000</td></tr><tr><td>布尔类型（boolean）</td><td>false</td></tr><tr><td>引用类型（类，接口和数组）</td><td>null</td></tr></tbody></table></li></ol></li></ol></li><li><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><ol><li><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><blockquote><p>由于数组的索引值是从 0 开始的，所以第一个数组元素的索引值为 0，最后一个数组元素的索引值为数组长度减1，因此一个数组的遍历应该如下代码所示：</p></blockquote><ol><li><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个 int 数组类型的变量，变量名为 intArr</span></span><br><span class="line">        <span class="keyword">int</span>[] intArr;</span><br><span class="line">        <span class="comment">// 使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度</span></span><br><span class="line">        intArr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="comment">// 数组的遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> i1 = intArr[i];</span><br><span class="line">            System.out.println(<span class="string">"第"</span>+ i + <span class="string">"个数组元素的值是"</span>+<span class="string">"intArr["</span> + i + <span class="string">"] = "</span> + intArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    第0个数组元素的值是intArr[0] = 5</span></span><br><span class="line"><span class="comment">    第1个数组元素的值是intArr[1] = 6</span></span><br><span class="line"><span class="comment">    第2个数组元素的值是intArr[2] = 8</span></span><br><span class="line"><span class="comment">    第3个数组元素的值是intArr[3] = 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h5 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FroEachTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] books = &#123;<span class="string">"西游记"</span>, <span class="string">"红楼梦"</span>, <span class="string">"水浒传"</span>, <span class="string">"三国演义"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String book : books) &#123;</span><br><span class="line">            System.out.println(<span class="string">"book = "</span> + book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是</span></span><br><span class="line"><span class="comment">    book = 西游记</span></span><br><span class="line"><span class="comment">    book = 红楼梦</span></span><br><span class="line"><span class="comment">    book = 水浒传</span></span><br><span class="line"><span class="comment">    book = 三国演义</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="Arrays工具类（Java-8及之后版本）"><a href="#Arrays工具类（Java-8及之后版本）" class="headerlink" title="Arrays工具类（Java 8及之后版本）"></a>Arrays工具类（Java 8及之后版本）</h4><blockquote><p>在Java8及其之后的版本中，提供了一个名为<code>Arrays</code>的工具类，在这个工具类中，包含了一些static修饰的方法以此可以直接对数组进行操作。</p></blockquote><ol><li><h5 id="包含的方法有："><a href="#包含的方法有：" class="headerlink" title="包含的方法有："></a>包含的方法有：</h5><ol><li><code>int binarySearch(type[] a,type key)</code>：使用二分法查询key元素只在a数组中出现的索引，如果不包含key数值，则返回false，如使用方法，则数组元素需按照升序排列；</li><li><code>int binarySearch(type[] a,int fromIndex,int toIndex,type key)</code>：搜索a数组中fromIndex 到 toIndex 索引的元素，同样要求数组元素按照升序排列；</li><li><code>type[] copyOf(type[] original,int length)</code>：将original数组复制组成一个新的数组，length为新数组的长度，<code>length &lt; original.length ? [取original数组中前length长度的元素] : [original数组所有元素+补充0(数值类型),false(布尔类型),null(引用类型)]；</code></li><li><code>type[] copyOfRange(type[] original,int from,int to)</code>:只复制 original 数组从 from到to索引的元素；</li><li><code>boolean equals(type[] a,type[] a2)</code>：数组a，a2的长度相等及数组元素一一相同的时候，返回true；</li><li><code>void fill(type[] a,type val):</code>把a数组的所有元素赋值为val；</li><li><code>void fill(type[] a,int fromIndex,int toIndex,type val)</code>：仅仅将a数组的fromIndex到toIndex索引之间的数组元素赋值为val；</li><li><code>void sort(type[] a)</code>：对a数组进行排序；</li><li><code>void sort(type[] a,int fromIndex,int toIndex)</code>：对a数组从fromIndex到toIndex索引之间的数组元素进行排序；</li><li>String toString(type[] a)：将一个数组转换成一个字符串。</li></ol></li><li><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个a数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">// 定义一个a2数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">// a数组和a2数组的长度相等，每个元素依次相等，将输出true</span></span><br><span class="line">        System.out.println(<span class="string">"a数组和a2数组是否相等："</span> + Arrays.equals(a,a2));</span><br><span class="line">        <span class="comment">// 通过赋值a数组，生成一个b数组</span></span><br><span class="line">        <span class="keyword">int</span>[] b = Arrays.copyOf(a, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"a数组和b数组是否相等："</span> + Arrays.equals(a,b));</span><br><span class="line">        <span class="comment">// 输出b数组的元素</span></span><br><span class="line">        System.out.println(<span class="string">"b数组的元素为"</span> + Arrays.toString(b));</span><br><span class="line">        <span class="comment">// 将b数组的第3个元素（包括）到底5个元素（不包括）赋值为1</span></span><br><span class="line">        Arrays.fill(b,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 输出b数组的元素</span></span><br><span class="line">        System.out.println(<span class="string">"b数组的元素为"</span> + Arrays.toString(b));</span><br><span class="line">        <span class="comment">// 将b数组进行排序</span></span><br><span class="line">        Arrays.sort(b);</span><br><span class="line">        <span class="comment">// 输出b数组的元素</span></span><br><span class="line">        System.out.println(<span class="string">"b数组的元素为"</span> + Arrays.toString(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果为：</span></span><br><span class="line"><span class="comment">    a数组和a2数组是否相等：true</span></span><br><span class="line"><span class="comment">    a数组和b数组是否相等：false</span></span><br><span class="line"><span class="comment">    b数组的元素为[3, 4, 5, 6, 0, 0]</span></span><br><span class="line"><span class="comment">    b数组的元素为[3, 4, 1, 1, 0, 0]</span></span><br><span class="line"><span class="comment">    b数组的元素为[0, 0, 1, 1, 3, 4]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h4><ol><li><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><blockquote><p>冒泡排序的特点是，每一轮循环后，最大的一个数被交换到末尾，因此，下一轮循环就可以“刨除”最后的数，每一轮循环都比上一轮循环的结束位置靠前一位。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        <span class="comment">// 排序前:</span></span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ns.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ns.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ns[j] &gt; ns[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 交换ns[j]和ns[j+1]:</span></span><br><span class="line">                    <span class="keyword">int</span> tmp = ns[j];</span><br><span class="line">                    ns[j] = ns[j+<span class="number">1</span>];</span><br><span class="line">                    ns[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序后:</span></span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    [28, 12, 89, 73, 65, 18, 96, 50, 8, 36]</span></span><br><span class="line"><span class="comment">    [8, 12, 18, 28, 36, 50, 65, 73, 89, 96]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><blockquote><p>Java 中的Arrays工具类已经提供了sort()这一排序方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        Arrays.sort(ns);</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    [8, 12, 18, 28, 36, 50, 65, 73, 89, 96]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><ol><li><h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><blockquote><p>本质上来说就是数组的数组</p></blockquote><ol><li><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">type[][] arrName;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">arrName = <span class="keyword">new</span> type[length][];</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDimensionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] a;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">            System.out.println(a[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数组是编程语言中一种常见的数据结构，不同的语言对其的实现和处理也是不同的。下面将介绍Java中的数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>细谈Java之流程控制篇</title>
    <link href="http://yoursite.com/2020/05/28/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2020/05/28/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%AF%87/</id>
    <published>2020-05-28T01:19:29.000Z</published>
    <updated>2020-05-29T07:15:29.651Z</updated>
    
    <content type="html"><![CDATA[<p>任何一门编程语言都离不开流程控制，Java也不例外，在Java中提供了以下几种流程结构：</p><ol><li><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><blockquote><p>程序从上到下逐行执行，中间没有任何的跳转和判断。</p></blockquote></li><li><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><blockquote><p>根据条件来选择性地执行某段代码。</p></blockquote><a id="more"></a><ol><li><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a><code>if</code>条件语句</h4><blockquote><p><code>if</code>、<code>else</code>、<code>else if</code> 后的条件执行体，建议用一个花括号括起来，以防因为执行体语句过多而造成编译错误。</p><p>使用 <code>if...else</code> 语句是一定要先处理包含范围更小的情况</p></blockquote><ol><li><h5 id="形式一"><a href="#形式一" class="headerlink" title="形式一"></a>形式一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(login expression)&#123;</span><br><span class="line">statement...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="形式二"><a href="#形式二" class="headerlink" title="形式二"></a>形式二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logic expression) &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="形式三"><a href="#形式三" class="headerlink" title="形式三"></a>形式三</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logic expression) &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (login statement) &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="switch条件语句"><a href="#switch条件语句" class="headerlink" title="switch条件语句"></a><code>switch</code>条件语句</h4><blockquote><p>由一个控制表达式和多个case标签组成，其语句后面的控制表达式的数据类型只能是byte、short、char、int四种整数类型，枚举类型和<code>java.lang.String</code>类型（从Java7才允许），<strong>不能</strong>是 <strong>boolean</strong>类型</p></blockquote><ol><li><h5 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression)&#123;</span><br><span class="line"><span class="keyword">case</span> condition1:</span><br><span class="line">&#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> condition2:</span><br><span class="line">&#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> conditionN:</span><br><span class="line">&#123;</span><br><span class="line">        statement(s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line">statement(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><blockquote><p>用于实现根据循环条件重复执行某段代码</p><p>循环语句包含如下四部分：</p><pre><code>1. 初始化语句（init_statement） 2. 循环条件（test_expression）：**boolean 表达式** 3. 循环体（body_statement） 4. 迭代语句（iteration_statement）</code></pre></blockquote><ol><li><h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a><code>while</code>循环语句</h4><blockquote><p>先判断循环条件，如果为真则执行循环体，反之则不执行循环体。</p></blockquote><ol><li><h5 id="语法格式：-1"><a href="#语法格式：-1" class="headerlink" title="语法格式："></a>语法格式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[init_statement]</span><br><span class="line"><span class="keyword">while</span>(test_expression)&#123;</span><br><span class="line">statement;</span><br><span class="line">[iteration_statement]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 循环的初始化条件</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 count 小于10时，执行循环体</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="comment">// 迭代语句</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">    循环结束</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>一般情况下不要省略花括号，这样不仅会降低程序的可读性，还有可能会出现错误；</li><li>保证循环条件有变成false的时候，避免成为死循环；</li><li>避免while循环的循环条件后紧跟一个分号，从而生成死循环。</li></ol></li></ol></li><li><h4 id="do-wihie循环语句"><a href="#do-wihie循环语句" class="headerlink" title="do...wihie循环语句"></a><code>do...wihie</code>循环语句</h4><blockquote><p>先执行循环体，再判断循环条件，若循环条件为真，则执行下一次循环，反之则结束循环。</p></blockquote><ol><li><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[init_statement]</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">statement;</span><br><span class="line">[iteration_statement]</span><br><span class="line">&#125;<span class="keyword">while</span> (test_expression);</span><br></pre></td></tr></table></figure></li><li><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义变量count</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 执行do while 循环</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="comment">// 迭代语句</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 循环条件紧跟 while 关键字</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (count &lt; <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"循环结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">    循环结束</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h4><ol><li><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ([init_statement];[test_expression];[iteration_statement])&#123;</span><br><span class="line">stetement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 循环的初始化条件、循环条件、循环迭代语句都在下面一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; <span class="number">10</span>; count++) &#123;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">    循环结束</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>初始化语句可以同时指定多个初始化语句，循环条件也可以是一个包含逻辑运算符的表达式；</li><li>建议不要在循环体内修改循环变量的值，如有需要，重新定义一个临时变量，将循环变量的值赋给临时变量，再对临时变量进行修改；</li><li>初始化语句、循环跳进以及迭代语句是可以省略的，但切忌省略循环条件，以免造成死循环</li></ol></li></ol></li><li><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><blockquote><p>将一个循环套在另一个循环体内</p></blockquote></li></ol></li><li><h3 id="控制循环结构"><a href="#控制循环结构" class="headerlink" title="控制循环结构"></a>控制循环结构</h3><ol><li><h4 id="break"><a href="#break" class="headerlink" title="break"></a><code>break</code></h4><blockquote><p>用于：某些时候需要在某种条件出现时强行终止循环，而不是等待循环条件为false时</p></blockquote><ol><li><h5 id="直接跳出本次循环"><a href="#直接跳出本次循环" class="headerlink" title="直接跳出本次循环"></a>直接跳出本次循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i 的值是："</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行该语句时将结束循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    i 的值是：0</span></span><br><span class="line"><span class="comment">    i 的值是：1</span></span><br><span class="line"><span class="comment">    i 的值是：2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h5 id="结束外层循环"><a href="#结束外层循环" class="headerlink" title="结束外层循环"></a>结束外层循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 外层循环，outer作为标识符</span></span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内层循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"i = "</span> + i + <span class="string">"，j = "</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 跳出 outer 标签所标识的循环</span></span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果是：</span></span><br><span class="line"><span class="comment">i = 0，j = 0</span></span><br><span class="line"><span class="comment">i = 0，j = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a><code>continue</code></h4><blockquote><p>结束本次循环，开始下一次循环，并不会终止循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i 的值是："</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 忽略本次循环剩下的语句</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"continue后的输出语句"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果是：</span></span><br><span class="line"><span class="comment">    i 的值是：0</span></span><br><span class="line"><span class="comment">    continue后的输出语句</span></span><br><span class="line"><span class="comment">    i 的值是：1</span></span><br><span class="line"><span class="comment">    i 的值是：2</span></span><br><span class="line"><span class="comment">    continue后的输出语句</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h4 id="return"><a href="#return" class="headerlink" title="return"></a><code>return</code></h4><blockquote><p>直接结束该方法，循环也随之结束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"return后的输出语句"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是：</span></span><br><span class="line"><span class="comment">    i = 0</span></span><br><span class="line"><span class="comment">    return后的输出语句</span></span><br><span class="line"><span class="comment">    i = 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何一门编程语言都离不开流程控制，Java也不例外，在Java中提供了以下几种流程结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;顺序结构&quot;&gt;&lt;a href=&quot;#顺序结构&quot; class=&quot;headerlink&quot; title=&quot;顺序结构&quot;&gt;&lt;/a&gt;顺序结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;程序从上到下逐行执行，中间没有任何的跳转和判断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;根据条件来选择性地执行某段代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>细谈Java之程序基础篇</title>
    <link href="http://yoursite.com/2020/05/27/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2020/05/27/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2020-05-27T02:18:34.000Z</published>
    <updated>2020-05-28T01:16:07.499Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们来讲一下Java程序的基础结构，数据类型以及运算符的相关知识。</p><h3 id="Java的基础结构"><a href="#Java的基础结构" class="headerlink" title="Java的基础结构"></a>Java的基础结构</h3><blockquote><p>以 HelloWorld 为例</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释。</span></span><br><span class="line"><span class="comment">Java真的很有趣，希望你可以享受在其中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这是单行注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("这行代码被注释了，将不会被编译、执行");</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol><li><p>单行注释，以 <code>//</code> 开头 ，作用范围是当前行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释，以<code>/*</code> 开头，<code>*/</code> 结尾，作用范围是包含在块内的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">Java真的很有趣！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释，以<code>/**</code> 开头，<code>*/</code>结尾，例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多行注释的另一种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="类名命名规范"><a href="#类名命名规范" class="headerlink" title="类名命名规范"></a>类名命名规范</h4><ol><li>必须以英文字母开头，后可跟数字，字母及下划线的组合</li><li>习惯上以大写字母开头</li><li>习惯上多个单词组成的新的单词，多以每个单h词的首字母大写，如 HelloWorld。</li></ol></li><li><h4 id="方法命名规范"><a href="#方法命名规范" class="headerlink" title="方法命名规范"></a>方法命名规范</h4><ol><li>以英文字母开头，后可跟数字，字母及下划线的组合</li><li>习惯上首字母小写</li></ol></li><li><h4 id="static-静态方法修饰符，具体使用方法后续在介绍"><a href="#static-静态方法修饰符，具体使用方法后续在介绍" class="headerlink" title="static 静态方法修饰符，具体使用方法后续在介绍"></a><code>static</code> 静态方法修饰符，具体使用方法后续在介绍</h4></li><li><h4 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h4><ol><li><h5 id="分隔符-英文输入状态下"><a href="#分隔符-英文输入状态下" class="headerlink" title="分隔符(英文输入状态下)"></a>分隔符<font color=red>(英文输入状态下)</font></h5><ol><li><p>分号<font color=red><code>;</code></font></p><p>在Java中，语句之间的分割使用<font color=red><code>;</code></font>来表示的，多个语句可以写在同一行，但是之间必须以分号间隔开，也可以一条语句跨行写，只要最后以分号结尾即可。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">25</span>;String name = <span class="string">"李楠"</span>;</span><br><span class="line">String hello = <span class="string">"Java"</span> +</span><br><span class="line">        <span class="string">"你好！"</span>;</span><br></pre></td></tr></table></figure></li><li><p>花括号<font color=red><code>{}</code></font></p><p>作用是定义一个代码块，其实成对出现的，有一个“<code>{</code>”，必然会有一个“<code>}</code>”，反之亦然</p></li><li><p>方括号<font color=red><code>[]</code></font></p><p>其主要作用是用于访问数组元素</p></li><li><p>圆括号<font color=red><code>()</code></font></p><ol><li>定义方法时用圆括号来包含所有的形参声明</li><li>调用方法时使用圆括号来输入参数值</li><li>运算中的优先运算</li><li>强类型转换的运算符</li></ol></li><li><p>空格</p></li><li><p>圆点<font color=red><code>.</code></font></p><p>类/对象和它成员之间的分隔符</p></li></ol></li><li><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>规则：</p><ul><li>可以由字母、数字、下划线<font color=red><code>_</code></font>和美元符号<font color=red><code>$</code></font>组成，且数字不能打头</li><li>不能是关键字和保留字，但可以包含关键字和保留字</li><li>不能包含空格</li><li>符号只能包含美元符<font color=red><code>$</code></font></li></ul></li><li><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>如实例程序中的 <font color=red><code>class</code></font> ， <font color=red><code>public</code></font>都是关键字，像这样的关键字Java一共有50个，如下表所示</p><table><thead><tr><th align="center">Java</th><th align="center">的</th><th align="center">关</th><th align="center">键</th><th align="center">字</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">continue</td><td align="center">for</td><td align="center">new</td><td align="center">switch</td></tr><tr><td align="center">assert</td><td align="center">default</td><td align="center">if</td><td align="center">package</td><td align="center">synchronized</td></tr><tr><td align="center">boolean</td><td align="center">do</td><td align="center">goto</td><td align="center">private</td><td align="center">this</td></tr><tr><td align="center">break</td><td align="center">double</td><td align="center">implements</td><td align="center">protected</td><td align="center">throw</td></tr><tr><td align="center">byte</td><td align="center">else</td><td align="center">import</td><td align="center">public</td><td align="center">throws</td></tr><tr><td align="center">case</td><td align="center">enum</td><td align="center">instanceof</td><td align="center">return</td><td align="center">transient</td></tr><tr><td align="center">catch</td><td align="center">extends</td><td align="center">int</td><td align="center">short</td><td align="center">try</td></tr><tr><td align="center">char</td><td align="center">final</td><td align="center">interface</td><td align="center">static</td><td align="center">void</td></tr><tr><td align="center">class</td><td align="center">finally</td><td align="center">long</td><td align="center">strictfp</td><td align="center">volatile</td></tr><tr><td align="center">const</td><td align="center">float</td><td align="center">native</td><td align="center">super</td><td align="center">while</td></tr></tbody></table></li><li><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ol><li><p>基本类型</p><ol><li><p>boolean类型</p><ol><li>只有 true 和 false 两种数值，用来表示 逻辑上的 “真” 或 “假”</li><li>其类型的值或者变量一般用来进行流程控制，主要有如下几种：<ol><li><code>if</code> 条件控制语句</li><li><code>while</code>循环控制语句</li><li><code>do while</code> 循环控制语句</li><li><code>for</code> 循环控制语句</li><li>在 三目运算符 <code>?:</code> 中使用</li></ol></li></ol></li><li><p>数值类型</p><ol><li><p>整数类型</p><ul><li>byte （1个字节） </li><li>short （2个字节）</li><li>int （4个字节）</li><li>long （8个字节）<ul><li>在使用时，通常在这个整数值后增加一个<font color=red><code>L</code></font></li></ul></li></ul></li><li><p>字符类型</p><ul><li><p>char （2个字节）</p><p>用于表示单个的字符，字符型的数值必须使用单引号<font color=red><code>&#39;&#39;</code></font>括起来</p><p>使用 String 类来表示字符串，字符串要用<font color=red><code>&quot;&quot;</code></font>括起来</p></li></ul></li><li><p>浮点类型</p><blockquote><p>浮点数有两种表达方式：</p><p>​    1. 十进制数形式</p><p>​        如<code>5.12</code>，<code>512.0</code>，必须包含一个小数点，否则会被当成 <code>int</code> 类型处理</p><p>​    2. 科学计数法形式</p><p>​        如 5.12e2（即5.12 * 10^2)</p><p>三个特殊浮点值，用于表示溢出和出错</p><ol><li><p>正无穷大 （POSITIVE_INFINITY）</p><ol start="2"><li>负无穷大 （NEGATIVE_INFINITY）<ol start="3"><li>非数 （NaN）</li></ol></li></ol></li></ol></blockquote><ul><li><p>float （单精度浮点数，4个字节）</p><blockquote><p>如要使用，则须在该类型浮点数后跟一个 <font color=red><code>f</code></font> 或者 <font color=red><code>F</code></font></p></blockquote></li><li><p>double （双精度浮点数，8个字节）</p><blockquote><p>默认类型</p></blockquote></li></ul></li><li><p>数值中的下画线分割</p><p>Java7及之后的版本中，可以在数值中使用下画线，无论是整型，还是浮点型数值，都可以使用，通过使用下画线，可以直观的看到数值中到底包含多少位。</p></li><li><p>类型转换</p><ol><li>自动类型转换</li><li>强制类型转换</li></ol></li><li><p>直接量</p><blockquote><p>直接在程序中通过源码给出的值</p></blockquote><ol><li>类型<ol><li><code>int</code>类型：在程序中直接给出整数数值</li><li><code>long</code>类型：在整型数值后添加 <code>l</code> 或 <code>L</code></li><li><code>float</code>类型：在一个浮点数后添加 <code>f</code> 或 <code>F</code></li><li><code>double</code>类型：直接给出一个标准小数形式或者科学计数法形式的浮点数</li><li><code>boolean</code>类型：其直接量只有 <code>true</code> 和 <code>false</code></li><li><code>char</code>类型：有三种形式，分别是 <code>单引号括起来的字符</code>，<code>转义字符</code> 和 <code>Unicode值表示的字符</code></li><li><code>String</code>类型：双引号括起来的字符序列</li><li><code>null</code>类型：只有一个值： <code>null</code>，可以赋给任何引用类型的变量</li></ol></li><li>赋值</li></ol></li></ol></li></ol></li><li><p>引用类型</p><ol><li>类</li><li>接口</li><li>数组</li><li>null</li></ol></li></ol></li><li><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><ol><li><p>算数运算符</p><ol><li><code>+</code>：加法运算符</li><li><code>-</code>：减法运算符</li><li><code>*</code>：乘法运算符</li><li><code>/</code>：除法运算符<ol><li>两个整数类型之间的除法操作计算结果是整数，且除数不可以是0</li><li>如果有一个是浮点数或者两个都是浮点数，计算结果是浮点数，除数可以是0或者0.0，其结果是正无穷大或负无穷大</li></ol></li><li><code>%</code>：求余运算符</li><li><code>++</code>：自加<ol><li>单目运算符，只能操作一个操作数</li><li>只能操作单个数值型的变量，不能操作常量或者表达式</li><li>出现在操作数两边有不同的操作，分别是：<ol><li>操作数左边：先加 1 后用</li><li>操作数右边：先用再加 1 </li></ol></li></ol></li><li><code>--</code>：自减</li></ol></li><li><p>赋值运算位符</p></li><li><p>比较运算符</p><blockquote><p>比较运算结果是一个布尔值</p></blockquote><ol><li><p><code>&gt;</code>：大于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"5 是否大于 4.0："</span> + (<span class="number">5</span> &gt; <span class="number">4.0</span>)); <span class="comment">// 将输出 ：5 是否大于 4.0：true</span></span><br></pre></td></tr></table></figure></li><li><p><code>&gt;=</code>：大于等于</p></li><li><p><code>&lt;</code>：小于</p></li><li><p><code>&lt;=</code>：小于等于</p></li><li><p><code>==</code>：等于</p><blockquote><p>基本类型变量、值不能和引用类型变量、值使用 <code>==</code>进行比较；</p><p>boolean类型的变量、值不能和其他任意类型的变量、值使用 <code>==</code>进行比较；</p><p>若两个引用变量之间没有父子继承关系，其变量也不能使用 <code>==</code>进行比较。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"5 和 5.0 是否相等："</span> + (<span class="number">5</span> == <span class="number">5.0</span>)); <span class="comment">// 将输出 ：5 和 5.0 是否相等：true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"97 和 'a' 是否相等："</span> + (<span class="number">97</span> == <span class="string">'a'</span>)); <span class="comment">// 将输出 ：97 和 'a' 是否相等：true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"true 和 false 是否相等："</span> + (<span class="keyword">true</span> == <span class="keyword">false</span>)); <span class="comment">// 将输出：true 和 false 是否相等：false</span></span><br><span class="line"></span><br><span class="line">H h1 = <span class="keyword">new</span> H();</span><br><span class="line">H h2 = <span class="keyword">new</span> H();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"h1 是否等于 h2："</span> + (h1 ==h2)); <span class="comment">// 将输出：h1 是否等于 h2：false</span></span><br><span class="line"></span><br><span class="line">H h3 =h1;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"h3 是否等于 h1："</span> + (h3 == h1)); <span class="comment">// 将输出： h3 是否等于 h1：true</span></span><br></pre></td></tr></table></figure></li><li><p><code>!=</code>：不等于</p></li></ol></li><li><p>逻辑运算符</p><ol><li><code>&amp;&amp;</code>：与，同 true 为 true，否则为 false</li><li><code>&amp;</code>：不短路或，作用与 <code>&amp;&amp;</code>相同，但不会短路</li><li><code>||</code>：或，任一为 true 则 结果为 true ，否则为 false</li><li><code>|</code>：不短路或</li><li><code>!</code>：非，只需一个操作数，操作数为 true(false) 结果为 false(true)</li><li><code>^</code>：异或，相同为 false，不同为true</li></ol></li><li><p>位运算符</p><ol><li><p><code>&amp;</code>：按位与。同 1 为 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &amp; <span class="number">9</span>); <span class="comment">// 输出1</span></span><br></pre></td></tr></table></figure></li><li><p><code>|</code>：按位或：有一位为 1 则为 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> | <span class="number">9</span>); <span class="comment">// 将输出 13</span></span><br></pre></td></tr></table></figure></li><li><p><code>~</code>：按位非。单目运算符，将操作数每个位（包括符号位）全部取反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((~-<span class="number">5</span>)); <span class="comment">// 将输出 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>^</code>：按位异或。两位相同返回0，不同返回1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> ^ <span class="number">9</span>); <span class="comment">// 将输出 12</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;&lt;</code>：左移运算符</p><blockquote><p>将操作数的二进制码整体向左移动指定位数，左移后右边空出来的位用 <code>0</code> 填充，如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &lt;&lt; <span class="number">2</span>); <span class="comment">// 将输出 20</span></span><br><span class="line"></span><br><span class="line">System.out.println(-<span class="number">5</span> &lt;&lt; <span class="number">2</span>); <span class="comment">// 将输出 -20</span></span><br></pre></td></tr></table></figure></li><li><p><code>&gt;&gt;</code>：右移运算符</p><blockquote><p>将操作数的二进制码整体向右移动指定位数，左边空出来的用 符号位填充，即正数补 <code>0</code>，负数补 <code>1</code>,如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">5</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// 将输出 -2</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">5</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// 将输出 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>&gt;&gt;&gt;</code>无符号右移运算符</p><blockquote><p>将操作数的二进制码右移指定位数，左边空出来的位用 <code>0</code>填充</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">5</span> &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">// 将输出 1073741822</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>类型相关运算符</p></li><li><p>三目运算符 <code>?:</code></p><ol><li><p>语法格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expression) ? <span class="keyword">if</span>-<span class="keyword">true</span>-statement : <span class="keyword">if</span>-<span class="keyword">false</span>-statement;</span><br></pre></td></tr></table></figure></li><li><p>运算规则：</p><p>先对逻辑表达式expression求值，如果值为true，则返回 <code>if-true-statement</code>的值，若为false，则返回 <code>if-false-statement</code>的值</p></li></ol></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们来讲一下Java程序的基础结构，数据类型以及运算符的相关知识。&lt;/p&gt;
&lt;h3 id=&quot;Java的基础结构&quot;&gt;&lt;a href=&quot;#Java的基础结构&quot; class=&quot;headerlink&quot; title=&quot;Java的基础结构&quot;&gt;&lt;/a&gt;Java的基础结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以 HelloWorld 为例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>细谈Java之环境篇</title>
    <link href="http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/"/>
    <id>http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/</id>
    <published>2020-05-20T11:20:10.000Z</published>
    <updated>2020-05-20T14:38:02.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文涉及到的内容主要有："><a href="#本文涉及到的内容主要有：" class="headerlink" title="本文涉及到的内容主要有："></a>本文涉及到的内容主要有：</h3><ul><li>JDK的安装及环境变量的配置</li><li>IDE的选择</li></ul><a id="more"></a><p>因为<strong>Java</strong>是运行在<strong>JVM</strong>上的，所以无论你是在用<strong>Windows</strong>，还是<strong>MacOS</strong>，亦或者是<strong>Linux</strong>，第一件要做的事情就是安装<strong>JDK</strong>，并为其配置相应的环境变量，两者缺一不可。所以下面我们来完成这两件事。</p><ol><li><h4 id="JDK的安装"><a href="#JDK的安装" class="headerlink" title="JDK的安装"></a>JDK的安装</h4><ol><li><h5 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h5><p>目前JDK的最新版本是14，不过我们在这里以<strong>JDK 8</strong> 为例。</p><p>进入<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">JDK 8下载</a>,下载对应的版本</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gez5vmgvj3j30pi0mon2r.jpg" alt=""></p><p>待下载完成后，傻瓜式安装即可。</p></li><li><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><ol><li><h6 id="Windows系统环境变量配置"><a href="#Windows系统环境变量配置" class="headerlink" title="Windows系统环境变量配置"></a>Windows系统环境变量配置</h6><ol><li><p><strong>右击计算机 –&gt; 高级系统设置 –&gt; 环境变量 ，即可在此处配置所需的环境变量</strong></p></li><li><p>设置一个名为<font color=red><code>JAVA_HOME</code></font>的环境变量,其变量值为<font color=red>JDK</font>在本机的安装目录,如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_241</span><br></pre></td></tr></table></figure></li><li><p>创建名为 <font color=red>CLASSPATH</font>的环境变量，其变量值为：`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar&#96;</span><br></pre></td></tr></table></figure></li><li><p>在名为<font color=red>Path</font>的环境变量中，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;%JAVA_HOME%\bin; %JAVA_HOME%\jre\bin;&#96;</span><br></pre></td></tr></table></figure><p>注意：若在原有变量后边添加注意是否 有<font color=red><code>;</code></font>托没有则添加，若有，则直接添加上述变量值。</p></li><li><p>测试JDK是否安装成功</p><p>运行 cmd，在其中分别输入<font color=red> <code>java -version</code> </font>和<font color=red> <code>javac</code></font> ，若出现如下结果则证明安装成功，若没有，则检查环境变量的配置是否有错误！</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gez6eimxozj30el03ot8r.jpg" alt="java -version 结果"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gez6eijfr0j30hu0gkgo4.jpg" alt="javac结果"></p></li></ol></li><li><h6 id="macOS配置环境"><a href="#macOS配置环境" class="headerlink" title="macOS配置环境"></a>macOS配置环境</h6><ol><li>在 <font color=red><code>~/.profile</code></font> 或<font color=red> <code>~/.bash_profile</code> </font>中添加如下内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#添加Java环境变量</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_251.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<font color=red> source ~/.profile  </font>或者 <font color=red> <code>source ~/.bash_profile</code> </font>来使配置文件生效。</li><li>在终端中分别输入<font color=red> <code>java -version</code> </font>和<font color=red> <code>javac</code></font>来进行测试</li></ol></li></ol><p><font size=4><strong>到此，Windows端和macOS端的JDK及环境已完全配置好了。</strong></font></p></li></ol></li><li><h4 id="IDE的选择"><a href="#IDE的选择" class="headerlink" title="IDE的选择"></a>IDE的选择</h4><p>工欲善其事，必先利其器，因此如果想提供自己的编码效率，一款优秀IDE是必不可少的，然而市场上可供选择的IDE有很多，笔者在这里列举几个常用的。</p><ul><li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">NotePad ++</a>（免费）</li><li><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse</a> （免费）</li><li><a href="https://www.myeclipsecn.com/download/" target="_blank" rel="noopener">MyEclipse</a> （收费）</li><li><a href="https://www.jetbrains.com/idea/download/#section=mac（推荐，收费）" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/#section=mac（推荐，收费）</a>**</li></ul></li></ol><p>   &lt;! – 添加捐赠图标 –&gt;</p>   <div class ="post-donate">     <div id="donate_board" class="donate_bar center">       <a id="btn_donate" class="btn_donate" href="javascript:;" title="Donate 打赏"></a>       <span class="donate_txt">          &uarr;<br>          读后有收获可以支付宝请作者喝咖啡，         </span>               <br>     </div>  <p>   ​    <!-- 支付宝打赏图案 --></p><p>   <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gez7g14q3sj308n08i40j.jpg" alt="支付宝打赏">                             <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gez8ac8iv3j308o08jmzl.jpg" alt="微信打赏"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文涉及到的内容主要有：&quot;&gt;&lt;a href=&quot;#本文涉及到的内容主要有：&quot; class=&quot;headerlink&quot; title=&quot;本文涉及到的内容主要有：&quot;&gt;&lt;/a&gt;本文涉及到的内容主要有：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JDK的安装及环境变量的配置&lt;/li&gt;
&lt;li&gt;IDE的选择&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>细谈Java之前言</title>
    <link href="http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E5%89%8D%E8%A8%80/</id>
    <published>2020-05-20T11:08:46.000Z</published>
    <updated>2020-05-27T02:21:02.664Z</updated>
    
    <content type="html"><![CDATA[<p>大家好！我是阿斌，今天我们要学习一门新的编程语言——<code>Java</code>，那么在正式学习<code>Java</code>之前，让我们先来了解一下<code>java</code>是什么？我们为什么要学Java？它在如今众多的编程语言中占有什么地位？相比于其他编程语言它又有什么优点呢？话不多说，让我们一起走进Java的世界吧！</p><a id="more"></a><ol><li><p>Java是什么？</p><p>简单点儿说，它就是由Sun公司在1995年年初发布的一门编程语言，更详细的来讲，它还是一个平台，具体来说Java是由Java虚拟机（JVM）和Java应用编程接口（API）构成。到如今，Java的最新版本是Java SE 14。</p></li><li><p>为什么要学Java？</p><p>因为Java在全世界范围内应用广泛，Java工程师也是需求量最大的，当然，最根本的还是因为它<strong>高薪</strong>。说到这里就不得不提一下编程语言界的鄙视链了，感兴趣的可以自行搜索也可以参考<a href="https://juejin.im/post/5a0d3cc9f265da431d3c3b1a" target="_blank" rel="noopener">关于程序员之间丧心病狂的鄙视链——编程语言篇</a>这篇文章。当然大家可以当段子看一下。权威的还是要看下图所示。</p></li><li><p>Java的地位？</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gexi12hdg1j30kk0gqaag.jpg" alt=""></p><p>通过<a href="https://hellogithub.com/report/tiobe/" target="_blank" rel="noopener">HELLOGITHUB</a>统计的数据可以明显的看到Java的排名是很靠前的，这足以表明Java在编程语言界的地位了。</p></li><li><p><code>Java</code>优点是什么？</p><ol><li><code>Java</code>是一种面向对象的语言，更容易理解和学习；</li><li>可移植性强，<code>Java</code>的运行是在JVM上进行的，与平台无关；</li><li>取出了指针、头文件、结构等在<code>C++</code>中难以理解的东西；</li><li>类库强大；Java提供了丰富的类库</li><li>提供对<code>web</code>的支持</li></ol></li><li><p>总之，一句话：<strong>学Java，拿高薪！</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好！我是阿斌，今天我们要学习一门新的编程语言——&lt;code&gt;Java&lt;/code&gt;，那么在正式学习&lt;code&gt;Java&lt;/code&gt;之前，让我们先来了解一下&lt;code&gt;java&lt;/code&gt;是什么？我们为什么要学Java？它在如今众多的编程语言中占有什么地位？相比于其他编程语言它又有什么优点呢？话不多说，让我们一起走进Java的世界吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/01/hello-world/"/>
    <id>http://yoursite.com/2020/04/01/hello-world/</id>
    <published>2020-04-01T12:05:54.012Z</published>
    <updated>2020-04-01T12:05:54.012Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
