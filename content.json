{"meta":{"title":"辰、枫","subtitle":"","description":"","author":"JJacky Zhang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"标签","date":"2020-05-18T11:17:18.000Z","updated":"2020-05-18T11:17:47.186Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-18T11:15:52.000Z","updated":"2020-05-18T11:16:43.875Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"细谈Java之数组篇","slug":"细谈Java之数组篇","date":"2020-05-29T07:17:53.000Z","updated":"2020-05-30T00:55:18.531Z","comments":true,"path":"2020/05/29/细谈Java之数组篇/","link":"","permalink":"http://yoursite.com/2020/05/29/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/","excerpt":"概述 数组是编程语言中一种常见的数据结构，不同的语言对其的实现和处理也是不同的。下面将介绍Java中的数组。","text":"概述 数组是编程语言中一种常见的数据结构，不同的语言对其的实现和处理也是不同的。下面将介绍Java中的数组。 数组类型 数组是一种类型 在Java中，要求所有的数组元素有相同的数据类型，因此，在一个数组中，数组元素的类型是唯一的。 一旦其被初始化完成后，其所占内存空间也被固定下来了，即其长度不可改变。 数组是引用类型 数组的定义 两种语法格式 12type[] arrayName;（推荐）type arranName[]; 定义数组时不能指定数组的长度 数组的初始化 静态初始化 语法格式1234// 第一种方式arrayName = new type[]&#123;element1,element2,element3.....&#125;;// 第二种方式type[] arrayName = new type[]&#123;element1,element2,element3.....&#125;; 示例12345678910111213141516public class ArrayTest &#123; public static void main(String[] args) &#123; // 定义一个 int 数组类型的变量，变量名为 intArr int[] intArr; // 使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度 intArr = new int[]&#123;5, 6, 8, 20&#125;; // 定义一个 Object 数组类型的变量，变量名为 objArr Object[] objArr; // 使用静态初始化，初始化数组时数组元素的类型是 //定义数组时所指定的数组元素类型的子类 objArr = new String[]&#123;\"西游记\", \"吴承恩\"&#125;; Object[] objArr2; //使用静态初始化 objArr2 = new Object[]&#123;\"斗破苍穹\", \"天蚕土豆\"&#125;; &#125;&#125; 动态初始化 语法格式1arrayName = new type[length]; 初始值规则 数组元素类型 数组元素默认初始值 整数类型（byte、short、int、long） 0 浮点类型（float、double） 0.0 字符类型（char） \\u0000 布尔类型（boolean） false 引用类型（类，接口和数组） null 数组的使用 数组的遍历 由于数组的索引值是从 0 开始的，所以第一个数组元素的索引值为 0，最后一个数组元素的索引值为数组长度减1，因此一个数组的遍历应该如下代码所示： for循环1234567891011121314151617181920public class ArrayTest &#123; public static void main(String[] args) &#123; // 定义一个 int 数组类型的变量，变量名为 intArr int[] intArr; // 使用静态初始化，初始化数组时只指定数组元素的初始值，不指定数组长度 intArr = new int[]&#123;5, 6, 8, 20&#125;; // 数组的遍历 for (int i = 0; i &lt; intArr.length; i++) &#123; int i1 = intArr[i]; System.out.println(\"第\"+ i + \"个数组元素的值是\"+\"intArr[\" + i + \"] = \" + intArr[i]); &#125; &#125;&#125;/*运行结果是： 第0个数组元素的值是intArr[0] = 5 第1个数组元素的值是intArr[1] = 6 第2个数组元素的值是intArr[2] = 8 第3个数组元素的值是intArr[3] = 20*/ foreach循环12345678910111213141516public class FroEachTest &#123; public static void main(String[] args) &#123; String[] books = &#123;\"西游记\", \"红楼梦\", \"水浒传\", \"三国演义\"&#125;; for (String book : books) &#123; System.out.println(\"book = \" + book); &#125; &#125;&#125;/*运行结果是 book = 西游记 book = 红楼梦 book = 水浒传 book = 三国演义*/ Arrays工具类（Java 8及之后版本） 在Java8及其之后的版本中，提供了一个名为Arrays的工具类，在这个工具类中，包含了一些static修饰的方法以此可以直接对数组进行操作。 包含的方法有： int binarySearch(type[] a,type key)：使用二分法查询key元素只在a数组中出现的索引，如果不包含key数值，则返回false，如使用方法，则数组元素需按照升序排列； int binarySearch(type[] a,int fromIndex,int toIndex,type key)：搜索a数组中fromIndex 到 toIndex 索引的元素，同样要求数组元素按照升序排列； type[] copyOf(type[] original,int length)：将original数组复制组成一个新的数组，length为新数组的长度，length &lt; original.length ? [取original数组中前length长度的元素] : [original数组所有元素+补充0(数值类型),false(布尔类型),null(引用类型)]； type[] copyOfRange(type[] original,int from,int to):只复制 original 数组从 from到to索引的元素； boolean equals(type[] a,type[] a2)：数组a，a2的长度相等及数组元素一一相同的时候，返回true； void fill(type[] a,type val):把a数组的所有元素赋值为val； void fill(type[] a,int fromIndex,int toIndex,type val)：仅仅将a数组的fromIndex到toIndex索引之间的数组元素赋值为val； void sort(type[] a)：对a数组进行排序； void sort(type[] a,int fromIndex,int toIndex)：对a数组从fromIndex到toIndex索引之间的数组元素进行排序； String toString(type[] a)：将一个数组转换成一个字符串。 示例1234567891011121314151617181920212223242526272829303132import java.util.Arrays;public class ArraysTest &#123; public static void main(String[] args) &#123; // 定义一个a数组 int[] a = new int[]&#123;3, 4, 5, 6&#125;; // 定义一个a2数组 int[] a2 = new int[]&#123;3, 4, 5, 6&#125;; // a数组和a2数组的长度相等，每个元素依次相等，将输出true System.out.println(\"a数组和a2数组是否相等：\" + Arrays.equals(a,a2)); // 通过赋值a数组，生成一个b数组 int[] b = Arrays.copyOf(a, 6); System.out.println(\"a数组和b数组是否相等：\" + Arrays.equals(a,b)); // 输出b数组的元素 System.out.println(\"b数组的元素为\" + Arrays.toString(b)); // 将b数组的第3个元素（包括）到底5个元素（不包括）赋值为1 Arrays.fill(b,2,4,1); // 输出b数组的元素 System.out.println(\"b数组的元素为\" + Arrays.toString(b)); // 将b数组进行排序 Arrays.sort(b); // 输出b数组的元素 System.out.println(\"b数组的元素为\" + Arrays.toString(b)); &#125;&#125;/*运行结果为： a数组和a2数组是否相等：true a数组和b数组是否相等：false b数组的元素为[3, 4, 5, 6, 0, 0] b数组的元素为[3, 4, 1, 1, 0, 0] b数组的元素为[0, 0, 1, 1, 3, 4]*/ 数组的排序 冒泡排序 冒泡排序的特点是，每一轮循环后，最大的一个数被交换到末尾，因此，下一轮循环就可以“刨除”最后的数，每一轮循环都比上一轮循环的结束位置靠前一位。 1234567891011121314151617181920212223242526import java.util.Arrays;public class BubbleSortTest &#123; public static void main(String[] args) &#123; int[] ns = &#123; 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 &#125;; // 排序前: System.out.println(Arrays.toString(ns)); for (int i = 0; i &lt; ns.length - 1; i++) &#123; for (int j = 0; j &lt; ns.length - i - 1; j++) &#123; if (ns[j] &gt; ns[j+1]) &#123; // 交换ns[j]和ns[j+1]: int tmp = ns[j]; ns[j] = ns[j+1]; ns[j+1] = tmp; &#125; &#125; &#125; // 排序后: System.out.println(Arrays.toString(ns)); &#125;&#125;/*运行结果是： [28, 12, 89, 73, 65, 18, 96, 50, 8, 36] [8, 12, 18, 28, 36, 50, 65, 73, 89, 96]*/ 排序 Java 中的Arrays工具类已经提供了sort()这一排序方法 12345678910111213import java.util.Arrays;public class Main &#123; public static void main(String[] args) &#123; int[] ns = &#123; 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 &#125;; Arrays.sort(ns); System.out.println(Arrays.toString(ns)); &#125;&#125;/*运行结果是： [8, 12, 18, 28, 36, 50, 65, 73, 89, 96]*/ 多维数组 二维数组 本质上来说就是数组的数组 语法格式 1234// 定义type[][] arrName;// 初始化arrName = new type[length][]; 示例 1234567891011121314public class TwoDimensionTest &#123; public static void main(String[] args) &#123; int[][] a; a = new int[4][]; for (int i = 0; i &lt; a.length; i++) &#123; System.out.println(a[i]); &#125; a[0] = new int[2]; a[0][1] = 6; for (int i = 0; i &lt; a[0].length; i++) &#123; System.out.println(a[0][i]); &#125; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"细谈Java之流程控制篇","slug":"细谈Java之流程控制篇","date":"2020-05-28T01:19:29.000Z","updated":"2020-05-29T07:15:29.651Z","comments":true,"path":"2020/05/28/细谈Java之流程控制篇/","link":"","permalink":"http://yoursite.com/2020/05/28/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%AF%87/","excerpt":"任何一门编程语言都离不开流程控制，Java也不例外，在Java中提供了以下几种流程结构： 顺序结构 程序从上到下逐行执行，中间没有任何的跳转和判断。 分支结构 根据条件来选择性地执行某段代码。","text":"任何一门编程语言都离不开流程控制，Java也不例外，在Java中提供了以下几种流程结构： 顺序结构 程序从上到下逐行执行，中间没有任何的跳转和判断。 分支结构 根据条件来选择性地执行某段代码。 if条件语句 if、else、else if 后的条件执行体，建议用一个花括号括起来，以防因为执行体语句过多而造成编译错误。 使用 if...else 语句是一定要先处理包含范围更小的情况 形式一123if(login expression)&#123; statement...&#125; 形式二12345if (logic expression) &#123; statement...&#125; else &#123; statement...&#125; 形式三1234567if (logic expression) &#123; statement...&#125;else if (login statement) &#123; statement...&#125; else &#123; statement...&#125; switch条件语句 由一个控制表达式和多个case标签组成，其语句后面的控制表达式的数据类型只能是byte、short、char、int四种整数类型，枚举类型和java.lang.String类型（从Java7才允许），不能是 boolean类型 语法格式：12345678910111213141516171819202122switch (expression)&#123; case condition1: &#123; statement(s); break; &#125; case condition2: &#123; statement(s); break; &#125; ... case conditionN: &#123; statement(s); break; &#125; default: &#123; statement(s); &#125;&#125; 循环结构 用于实现根据循环条件重复执行某段代码 循环语句包含如下四部分： 1. 初始化语句（init_statement） 2. 循环条件（test_expression）：**boolean 表达式** 3. 循环体（body_statement） 4. 迭代语句（iteration_statement） while循环语句 先判断循环条件，如果为真则执行循环体，反之则不执行循环体。 语法格式：12345[init_statement]while(test_expression)&#123; statement; [iteration_statement]&#125; 示例12345678910111213141516171819202122232425262728public class WhileTest &#123; public static void main(String[] args) &#123; // 循环的初始化条件 int count = 0; // 当 count 小于10时，执行循环体 while (count &lt; 10) &#123; System.out.println(count); // 迭代语句 count++; &#125; System.out.println(\"循环结束\"); &#125;&#125;/*运行结果是： 0 1 2 3 4 5 6 7 8 9 循环结束*/ 注意事项 一般情况下不要省略花括号，这样不仅会降低程序的可读性，还有可能会出现错误； 保证循环条件有变成false的时候，避免成为死循环； 避免while循环的循环条件后紧跟一个分号，从而生成死循环。 do...wihie循环语句 先执行循环体，再判断循环条件，若循环条件为真，则执行下一次循环，反之则结束循环。 语法格式12345[init_statement]do&#123; statement; [iteration_statement]&#125;while (test_expression); 示例12345678910111213141516171819202122232425262728public class DoWhileTest &#123; public static void main(String[] args) &#123; // 定义变量count int count = 1; // 执行do while 循环 do &#123; System.out.println(count); // 迭代语句 count++; // 循环条件紧跟 while 关键字 &#125; while (count &lt; 10); System.out.println(\"循环结束\"); &#125;&#125;/*运行结果是： 1 2 3 4 5 6 7 8 9 循环结束*/ for循环 语法格式123for ([init_statement];[test_expression];[iteration_statement])&#123; stetement&#125; 示例123456789101112131415161718192021222324public class ForTest &#123; public static void main(String[] args) &#123; // 循环的初始化条件、循环条件、循环迭代语句都在下面一行 for (int count = 0; count &lt; 10; count++) &#123; System.out.println(count); &#125; System.out.println(\"循环结束\"); &#125;&#125;/*运行结果是： 0 1 2 3 4 5 6 7 8 9 循环结束*/ 注意事项 初始化语句可以同时指定多个初始化语句，循环条件也可以是一个包含逻辑运算符的表达式； 建议不要在循环体内修改循环变量的值，如有需要，重新定义一个临时变量，将循环变量的值赋给临时变量，再对临时变量进行修改； 初始化语句、循环跳进以及迭代语句是可以省略的，但切忌省略循环条件，以免造成死循环 嵌套循环 将一个循环套在另一个循环体内 控制循环结构 break 用于：某些时候需要在某种条件出现时强行终止循环，而不是等待循环条件为false时 直接跳出本次循环123456789101112131415161718public class BreakTest1 &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.println(\"i 的值是：\" + i); if (i == 2) &#123; // 执行该语句时将结束循环 break; &#125; &#125; &#125;&#125;/*运行结果是： i 的值是：0 i 的值是：1 i 的值是：2*/ 结束外层循环12345678910111213141516171819202122public class BreakTest2 &#123; public static void main(String[] args) &#123; // 外层循环，outer作为标识符 outer: for (int i = 0; i &lt; 5; i++) &#123; //内层循环 for (int j = 0; j &lt; 3; j++) &#123; System.out.println(\"i = \" + i + \"，j = \" + j); if (j == 1) &#123; // 跳出 outer 标签所标识的循环 break outer; &#125; &#125; &#125; &#125;&#125;/*结果是： i = 0，j = 0 i = 0，j = 1*/ continue 结束本次循环，开始下一次循环，并不会终止循环 123456789101112131415161718192021public class ContinueTest &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 3; i++) &#123; System.out.println(\"i 的值是：\" + i); if (i == 1) &#123; // 忽略本次循环剩下的语句 continue; &#125; System.out.println(\"continue后的输出语句\"); &#125; &#125;&#125;/*结果是： i 的值是：0 continue后的输出语句 i 的值是：1 i 的值是：2 continue后的输出语句*/ return 直接结束该方法，循环也随之结束 123456789101112131415161718public class ReturnTest &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 3; i++) &#123; System.out.println(\"i = \" + i); if (i == 1) &#123; return; &#125; System.out.println(\"return后的输出语句\"); &#125; &#125;&#125;/*运行结果是： i = 0 return后的输出语句 i = 1 */","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"细谈Java之程序基础篇","slug":"细谈Java之程序基础篇","date":"2020-05-27T02:18:34.000Z","updated":"2020-05-28T01:16:07.499Z","comments":true,"path":"2020/05/27/细谈Java之程序基础篇/","link":"","permalink":"http://yoursite.com/2020/05/27/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E7%AF%87/","excerpt":"今天，我们来讲一下Java程序的基础结构，数据类型以及运算符的相关知识。 Java的基础结构 以 HelloWorld 为例","text":"今天，我们来讲一下Java程序的基础结构，数据类型以及运算符的相关知识。 Java的基础结构 以 HelloWorld 为例 1234567891011/*这是多行注释。Java真的很有趣，希望你可以享受在其中。*/public class HelloWorld &#123; // 这是单行注释 public static void main(String[] args) &#123; // System.out.println(\"这行代码被注释了，将不会被编译、执行\"); System.out.println(\"Hello World!\"); &#125;&#125; 注释 单行注释，以 // 开头 ，作用范围是当前行 1// 单行注释 多行注释，以/* 开头，*/ 结尾，作用范围是包含在块内的 1234/*多行注释Java真的很有趣！*/ 多行注释，以/** 开头，*/结尾，例： 123/** * 多行注释的另一种方式 */ 类名命名规范 必须以英文字母开头，后可跟数字，字母及下划线的组合 习惯上以大写字母开头 习惯上多个单词组成的新的单词，多以每个单h词的首字母大写，如 HelloWorld。 方法命名规范 以英文字母开头，后可跟数字，字母及下划线的组合 习惯上首字母小写 static 静态方法修饰符，具体使用方法后续在介绍 标识符和关键字 分隔符(英文输入状态下) 分号; 在Java中，语句之间的分割使用;来表示的，多个语句可以写在同一行，但是之间必须以分号间隔开，也可以一条语句跨行写，只要最后以分号结尾即可。如： 123int age = 25;String name = \"李楠\";String hello = \"Java\" + \"你好！\"; 花括号{} 作用是定义一个代码块，其实成对出现的，有一个“{”，必然会有一个“}”，反之亦然 方括号[] 其主要作用是用于访问数组元素 圆括号() 定义方法时用圆括号来包含所有的形参声明 调用方法时使用圆括号来输入参数值 运算中的优先运算 强类型转换的运算符 空格 圆点. 类/对象和它成员之间的分隔符 标识符规则： 可以由字母、数字、下划线_和美元符号$组成，且数字不能打头 不能是关键字和保留字，但可以包含关键字和保留字 不能包含空格 符号只能包含美元符$ 关键字如实例程序中的 class ， public都是关键字，像这样的关键字Java一共有50个，如下表所示 Java 的 关 键 字 abstract continue for new switch assert default if package synchronized boolean do goto private this break double implements protected throw byte else import public throws case enum instanceof return transient catch extends int short try char final interface static void class finally long strictfp volatile const float native super while 数据类型 基本类型 boolean类型 只有 true 和 false 两种数值，用来表示 逻辑上的 “真” 或 “假” 其类型的值或者变量一般用来进行流程控制，主要有如下几种： if 条件控制语句 while循环控制语句 do while 循环控制语句 for 循环控制语句 在 三目运算符 ?: 中使用 数值类型 整数类型 byte （1个字节） short （2个字节） int （4个字节） long （8个字节） 在使用时，通常在这个整数值后增加一个L 字符类型 char （2个字节） 用于表示单个的字符，字符型的数值必须使用单引号&#39;&#39;括起来 使用 String 类来表示字符串，字符串要用&quot;&quot;括起来 浮点类型 浮点数有两种表达方式： ​ 1. 十进制数形式 ​ 如5.12，512.0，必须包含一个小数点，否则会被当成 int 类型处理 ​ 2. 科学计数法形式 ​ 如 5.12e2（即5.12 * 10^2) 三个特殊浮点值，用于表示溢出和出错 正无穷大 （POSITIVE_INFINITY） 负无穷大 （NEGATIVE_INFINITY） 非数 （NaN） float （单精度浮点数，4个字节） 如要使用，则须在该类型浮点数后跟一个 f 或者 F double （双精度浮点数，8个字节） 默认类型 数值中的下画线分割 Java7及之后的版本中，可以在数值中使用下画线，无论是整型，还是浮点型数值，都可以使用，通过使用下画线，可以直观的看到数值中到底包含多少位。 类型转换 自动类型转换 强制类型转换 直接量 直接在程序中通过源码给出的值 类型 int类型：在程序中直接给出整数数值 long类型：在整型数值后添加 l 或 L float类型：在一个浮点数后添加 f 或 F double类型：直接给出一个标准小数形式或者科学计数法形式的浮点数 boolean类型：其直接量只有 true 和 false char类型：有三种形式，分别是 单引号括起来的字符，转义字符 和 Unicode值表示的字符 String类型：双引号括起来的字符序列 null类型：只有一个值： null，可以赋给任何引用类型的变量 赋值 引用类型 类 接口 数组 null 运算符 算数运算符 +：加法运算符 -：减法运算符 *：乘法运算符 /：除法运算符 两个整数类型之间的除法操作计算结果是整数，且除数不可以是0 如果有一个是浮点数或者两个都是浮点数，计算结果是浮点数，除数可以是0或者0.0，其结果是正无穷大或负无穷大 %：求余运算符 ++：自加 单目运算符，只能操作一个操作数 只能操作单个数值型的变量，不能操作常量或者表达式 出现在操作数两边有不同的操作，分别是： 操作数左边：先加 1 后用 操作数右边：先用再加 1 --：自减 赋值运算位符 比较运算符 比较运算结果是一个布尔值 &gt;：大于 1System.out.println(\"5 是否大于 4.0：\" + (5 &gt; 4.0)); // 将输出 ：5 是否大于 4.0：true &gt;=：大于等于 &lt;：小于 &lt;=：小于等于 ==：等于 基本类型变量、值不能和引用类型变量、值使用 ==进行比较； boolean类型的变量、值不能和其他任意类型的变量、值使用 ==进行比较； 若两个引用变量之间没有父子继承关系，其变量也不能使用 ==进行比较。 1234567891011121314System.out.println(\"5 和 5.0 是否相等：\" + (5 == 5.0)); // 将输出 ：5 和 5.0 是否相等：trueSystem.out.println(\"97 和 'a' 是否相等：\" + (97 == 'a')); // 将输出 ：97 和 'a' 是否相等：trueSystem.out.println(\"true 和 false 是否相等：\" + (true == false)); // 将输出：true 和 false 是否相等：falseH h1 = new H();H h2 = new H();System.out.println(\"h1 是否等于 h2：\" + (h1 ==h2)); // 将输出：h1 是否等于 h2：falseH h3 =h1;System.out.println(\"h3 是否等于 h1：\" + (h3 == h1)); // 将输出： h3 是否等于 h1：true !=：不等于 逻辑运算符 &amp;&amp;：与，同 true 为 true，否则为 false &amp;：不短路或，作用与 &amp;&amp;相同，但不会短路 ||：或，任一为 true 则 结果为 true ，否则为 false |：不短路或 !：非，只需一个操作数，操作数为 true(false) 结果为 false(true) ^：异或，相同为 false，不同为true 位运算符 &amp;：按位与。同 1 为 1 1System.out.println(5 &amp; 9); // 输出1 |：按位或：有一位为 1 则为 1 1System.out.println(5 | 9); // 将输出 13 ~：按位非。单目运算符，将操作数每个位（包括符号位）全部取反 1System.out.println((~-5)); // 将输出 4 ^：按位异或。两位相同返回0，不同返回1 1System.out.println(5 ^ 9); // 将输出 12 &lt;&lt;：左移运算符 将操作数的二进制码整体向左移动指定位数，左移后右边空出来的位用 0 填充，如： 123System.out.println(5 &lt;&lt; 2); // 将输出 20System.out.println(-5 &lt;&lt; 2); // 将输出 -20 &gt;&gt;：右移运算符 将操作数的二进制码整体向右移动指定位数，左边空出来的用 符号位填充，即正数补 0，负数补 1,如： 123System.out.println(-5 &gt;&gt; 2); // 将输出 -2System.out.println(5 &gt;&gt; 2); // 将输出 1 &gt;&gt;&gt;无符号右移运算符 将操作数的二进制码右移指定位数，左边空出来的位用 0填充 1System.out.println(-5 &gt;&gt;&gt; 2); // 将输出 1073741822 类型相关运算符 三目运算符 ?: 语法格式为 1(expression) ? if-true-statement : if-false-statement; 运算规则： 先对逻辑表达式expression求值，如果值为true，则返回 if-true-statement的值，若为false，则返回 if-false-statement的值","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"细谈Java之环境篇","slug":"细谈Java之环境篇","date":"2020-05-20T11:20:10.000Z","updated":"2020-05-20T14:38:02.451Z","comments":true,"path":"2020/05/20/细谈Java之环境篇/","link":"","permalink":"http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/","excerpt":"本文涉及到的内容主要有： JDK的安装及环境变量的配置 IDE的选择","text":"本文涉及到的内容主要有： JDK的安装及环境变量的配置 IDE的选择 因为Java是运行在JVM上的，所以无论你是在用Windows，还是MacOS，亦或者是Linux，第一件要做的事情就是安装JDK，并为其配置相应的环境变量，两者缺一不可。所以下面我们来完成这两件事。 JDK的安装 下载JDK目前JDK的最新版本是14，不过我们在这里以JDK 8 为例。 进入JDK 8下载,下载对应的版本 待下载完成后，傻瓜式安装即可。 配置环境变量 Windows系统环境变量配置 右击计算机 –&gt; 高级系统设置 –&gt; 环境变量 ，即可在此处配置所需的环境变量 设置一个名为JAVA_HOME的环境变量,其变量值为JDK在本机的安装目录,如： 1C:\\Program Files\\Java\\jdk1.8.0_241 创建名为 CLASSPATH的环境变量，其变量值为：` 1.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar&#96; 在名为Path的环境变量中，添加 1&#96;%JAVA_HOME%\\bin; %JAVA_HOME%\\jre\\bin;&#96; 注意：若在原有变量后边添加注意是否 有;托没有则添加，若有，则直接添加上述变量值。 测试JDK是否安装成功 运行 cmd，在其中分别输入 java -version 和 javac ，若出现如下结果则证明安装成功，若没有，则检查环境变量的配置是否有错误！ macOS配置环境 在 ~/.profile 或 ~/.bash_profile 中添加如下内容 1234#添加Java环境变量export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_251.jdk&#x2F;Contents&#x2F;Homeexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATHexport CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar 使用 source ~/.profile 或者 source ~/.bash_profile 来使配置文件生效。 在终端中分别输入 java -version 和 javac来进行测试 到此，Windows端和macOS端的JDK及环境已完全配置好了。 IDE的选择工欲善其事，必先利其器，因此如果想提供自己的编码效率，一款优秀IDE是必不可少的，然而市场上可供选择的IDE有很多，笔者在这里列举几个常用的。 NotePad ++（免费） Eclipse （免费） MyEclipse （收费） https://www.jetbrains.com/idea/download/#section=mac（推荐，收费）** &lt;! – 添加捐赠图标 –&gt; &uarr; 读后有收获可以支付宝请作者喝咖啡， ​","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"细谈Java之前言","slug":"细谈Java之前言","date":"2020-05-20T11:08:46.000Z","updated":"2020-05-27T02:21:02.664Z","comments":true,"path":"2020/05/20/细谈Java之前言/","link":"","permalink":"http://yoursite.com/2020/05/20/%E7%BB%86%E8%B0%88Java%E4%B9%8B%E5%89%8D%E8%A8%80/","excerpt":"大家好！我是阿斌，今天我们要学习一门新的编程语言——Java，那么在正式学习Java之前，让我们先来了解一下java是什么？我们为什么要学Java？它在如今众多的编程语言中占有什么地位？相比于其他编程语言它又有什么优点呢？话不多说，让我们一起走进Java的世界吧！","text":"大家好！我是阿斌，今天我们要学习一门新的编程语言——Java，那么在正式学习Java之前，让我们先来了解一下java是什么？我们为什么要学Java？它在如今众多的编程语言中占有什么地位？相比于其他编程语言它又有什么优点呢？话不多说，让我们一起走进Java的世界吧！ Java是什么？ 简单点儿说，它就是由Sun公司在1995年年初发布的一门编程语言，更详细的来讲，它还是一个平台，具体来说Java是由Java虚拟机（JVM）和Java应用编程接口（API）构成。到如今，Java的最新版本是Java SE 14。 为什么要学Java？ 因为Java在全世界范围内应用广泛，Java工程师也是需求量最大的，当然，最根本的还是因为它高薪。说到这里就不得不提一下编程语言界的鄙视链了，感兴趣的可以自行搜索也可以参考关于程序员之间丧心病狂的鄙视链——编程语言篇这篇文章。当然大家可以当段子看一下。权威的还是要看下图所示。 Java的地位？ 通过HELLOGITHUB统计的数据可以明显的看到Java的排名是很靠前的，这足以表明Java在编程语言界的地位了。 Java优点是什么？ Java是一种面向对象的语言，更容易理解和学习； 可移植性强，Java的运行是在JVM上进行的，与平台无关； 取出了指针、头文件、结构等在C++中难以理解的东西； 类库强大；Java提供了丰富的类库 提供对web的支持 总之，一句话：学Java，拿高薪！","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-01T12:05:54.012Z","updated":"2020-04-01T12:05:54.012Z","comments":true,"path":"2020/04/01/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"}]}